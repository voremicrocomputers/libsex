/* automatically generated by rust-bindgen */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 33;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const GLFW_VERSION_MAJOR: u32 = 3;
pub const GLFW_VERSION_MINOR: u32 = 3;
pub const GLFW_VERSION_REVISION: u32 = 6;
pub const GLFW_TRUE: u32 = 1;
pub const GLFW_FALSE: u32 = 0;
pub const GLFW_RELEASE: u32 = 0;
pub const GLFW_PRESS: u32 = 1;
pub const GLFW_REPEAT: u32 = 2;
pub const GLFW_HAT_CENTERED: u32 = 0;
pub const GLFW_HAT_UP: u32 = 1;
pub const GLFW_HAT_RIGHT: u32 = 2;
pub const GLFW_HAT_DOWN: u32 = 4;
pub const GLFW_HAT_LEFT: u32 = 8;
pub const GLFW_HAT_RIGHT_UP: u32 = 3;
pub const GLFW_HAT_RIGHT_DOWN: u32 = 6;
pub const GLFW_HAT_LEFT_UP: u32 = 9;
pub const GLFW_HAT_LEFT_DOWN: u32 = 12;
pub const GLFW_KEY_UNKNOWN: i32 = -1;
pub const GLFW_KEY_SPACE: u32 = 32;
pub const GLFW_KEY_APOSTROPHE: u32 = 39;
pub const GLFW_KEY_COMMA: u32 = 44;
pub const GLFW_KEY_MINUS: u32 = 45;
pub const GLFW_KEY_PERIOD: u32 = 46;
pub const GLFW_KEY_SLASH: u32 = 47;
pub const GLFW_KEY_0: u32 = 48;
pub const GLFW_KEY_1: u32 = 49;
pub const GLFW_KEY_2: u32 = 50;
pub const GLFW_KEY_3: u32 = 51;
pub const GLFW_KEY_4: u32 = 52;
pub const GLFW_KEY_5: u32 = 53;
pub const GLFW_KEY_6: u32 = 54;
pub const GLFW_KEY_7: u32 = 55;
pub const GLFW_KEY_8: u32 = 56;
pub const GLFW_KEY_9: u32 = 57;
pub const GLFW_KEY_SEMICOLON: u32 = 59;
pub const GLFW_KEY_EQUAL: u32 = 61;
pub const GLFW_KEY_A: u32 = 65;
pub const GLFW_KEY_B: u32 = 66;
pub const GLFW_KEY_C: u32 = 67;
pub const GLFW_KEY_D: u32 = 68;
pub const GLFW_KEY_E: u32 = 69;
pub const GLFW_KEY_F: u32 = 70;
pub const GLFW_KEY_G: u32 = 71;
pub const GLFW_KEY_H: u32 = 72;
pub const GLFW_KEY_I: u32 = 73;
pub const GLFW_KEY_J: u32 = 74;
pub const GLFW_KEY_K: u32 = 75;
pub const GLFW_KEY_L: u32 = 76;
pub const GLFW_KEY_M: u32 = 77;
pub const GLFW_KEY_N: u32 = 78;
pub const GLFW_KEY_O: u32 = 79;
pub const GLFW_KEY_P: u32 = 80;
pub const GLFW_KEY_Q: u32 = 81;
pub const GLFW_KEY_R: u32 = 82;
pub const GLFW_KEY_S: u32 = 83;
pub const GLFW_KEY_T: u32 = 84;
pub const GLFW_KEY_U: u32 = 85;
pub const GLFW_KEY_V: u32 = 86;
pub const GLFW_KEY_W: u32 = 87;
pub const GLFW_KEY_X: u32 = 88;
pub const GLFW_KEY_Y: u32 = 89;
pub const GLFW_KEY_Z: u32 = 90;
pub const GLFW_KEY_LEFT_BRACKET: u32 = 91;
pub const GLFW_KEY_BACKSLASH: u32 = 92;
pub const GLFW_KEY_RIGHT_BRACKET: u32 = 93;
pub const GLFW_KEY_GRAVE_ACCENT: u32 = 96;
pub const GLFW_KEY_WORLD_1: u32 = 161;
pub const GLFW_KEY_WORLD_2: u32 = 162;
pub const GLFW_KEY_ESCAPE: u32 = 256;
pub const GLFW_KEY_ENTER: u32 = 257;
pub const GLFW_KEY_TAB: u32 = 258;
pub const GLFW_KEY_BACKSPACE: u32 = 259;
pub const GLFW_KEY_INSERT: u32 = 260;
pub const GLFW_KEY_DELETE: u32 = 261;
pub const GLFW_KEY_RIGHT: u32 = 262;
pub const GLFW_KEY_LEFT: u32 = 263;
pub const GLFW_KEY_DOWN: u32 = 264;
pub const GLFW_KEY_UP: u32 = 265;
pub const GLFW_KEY_PAGE_UP: u32 = 266;
pub const GLFW_KEY_PAGE_DOWN: u32 = 267;
pub const GLFW_KEY_HOME: u32 = 268;
pub const GLFW_KEY_END: u32 = 269;
pub const GLFW_KEY_CAPS_LOCK: u32 = 280;
pub const GLFW_KEY_SCROLL_LOCK: u32 = 281;
pub const GLFW_KEY_NUM_LOCK: u32 = 282;
pub const GLFW_KEY_PRINT_SCREEN: u32 = 283;
pub const GLFW_KEY_PAUSE: u32 = 284;
pub const GLFW_KEY_F1: u32 = 290;
pub const GLFW_KEY_F2: u32 = 291;
pub const GLFW_KEY_F3: u32 = 292;
pub const GLFW_KEY_F4: u32 = 293;
pub const GLFW_KEY_F5: u32 = 294;
pub const GLFW_KEY_F6: u32 = 295;
pub const GLFW_KEY_F7: u32 = 296;
pub const GLFW_KEY_F8: u32 = 297;
pub const GLFW_KEY_F9: u32 = 298;
pub const GLFW_KEY_F10: u32 = 299;
pub const GLFW_KEY_F11: u32 = 300;
pub const GLFW_KEY_F12: u32 = 301;
pub const GLFW_KEY_F13: u32 = 302;
pub const GLFW_KEY_F14: u32 = 303;
pub const GLFW_KEY_F15: u32 = 304;
pub const GLFW_KEY_F16: u32 = 305;
pub const GLFW_KEY_F17: u32 = 306;
pub const GLFW_KEY_F18: u32 = 307;
pub const GLFW_KEY_F19: u32 = 308;
pub const GLFW_KEY_F20: u32 = 309;
pub const GLFW_KEY_F21: u32 = 310;
pub const GLFW_KEY_F22: u32 = 311;
pub const GLFW_KEY_F23: u32 = 312;
pub const GLFW_KEY_F24: u32 = 313;
pub const GLFW_KEY_F25: u32 = 314;
pub const GLFW_KEY_KP_0: u32 = 320;
pub const GLFW_KEY_KP_1: u32 = 321;
pub const GLFW_KEY_KP_2: u32 = 322;
pub const GLFW_KEY_KP_3: u32 = 323;
pub const GLFW_KEY_KP_4: u32 = 324;
pub const GLFW_KEY_KP_5: u32 = 325;
pub const GLFW_KEY_KP_6: u32 = 326;
pub const GLFW_KEY_KP_7: u32 = 327;
pub const GLFW_KEY_KP_8: u32 = 328;
pub const GLFW_KEY_KP_9: u32 = 329;
pub const GLFW_KEY_KP_DECIMAL: u32 = 330;
pub const GLFW_KEY_KP_DIVIDE: u32 = 331;
pub const GLFW_KEY_KP_MULTIPLY: u32 = 332;
pub const GLFW_KEY_KP_SUBTRACT: u32 = 333;
pub const GLFW_KEY_KP_ADD: u32 = 334;
pub const GLFW_KEY_KP_ENTER: u32 = 335;
pub const GLFW_KEY_KP_EQUAL: u32 = 336;
pub const GLFW_KEY_LEFT_SHIFT: u32 = 340;
pub const GLFW_KEY_LEFT_CONTROL: u32 = 341;
pub const GLFW_KEY_LEFT_ALT: u32 = 342;
pub const GLFW_KEY_LEFT_SUPER: u32 = 343;
pub const GLFW_KEY_RIGHT_SHIFT: u32 = 344;
pub const GLFW_KEY_RIGHT_CONTROL: u32 = 345;
pub const GLFW_KEY_RIGHT_ALT: u32 = 346;
pub const GLFW_KEY_RIGHT_SUPER: u32 = 347;
pub const GLFW_KEY_MENU: u32 = 348;
pub const GLFW_KEY_LAST: u32 = 348;
pub const GLFW_MOD_SHIFT: u32 = 1;
pub const GLFW_MOD_CONTROL: u32 = 2;
pub const GLFW_MOD_ALT: u32 = 4;
pub const GLFW_MOD_SUPER: u32 = 8;
pub const GLFW_MOD_CAPS_LOCK: u32 = 16;
pub const GLFW_MOD_NUM_LOCK: u32 = 32;
pub const GLFW_MOUSE_BUTTON_1: u32 = 0;
pub const GLFW_MOUSE_BUTTON_2: u32 = 1;
pub const GLFW_MOUSE_BUTTON_3: u32 = 2;
pub const GLFW_MOUSE_BUTTON_4: u32 = 3;
pub const GLFW_MOUSE_BUTTON_5: u32 = 4;
pub const GLFW_MOUSE_BUTTON_6: u32 = 5;
pub const GLFW_MOUSE_BUTTON_7: u32 = 6;
pub const GLFW_MOUSE_BUTTON_8: u32 = 7;
pub const GLFW_MOUSE_BUTTON_LAST: u32 = 7;
pub const GLFW_MOUSE_BUTTON_LEFT: u32 = 0;
pub const GLFW_MOUSE_BUTTON_RIGHT: u32 = 1;
pub const GLFW_MOUSE_BUTTON_MIDDLE: u32 = 2;
pub const GLFW_JOYSTICK_1: u32 = 0;
pub const GLFW_JOYSTICK_2: u32 = 1;
pub const GLFW_JOYSTICK_3: u32 = 2;
pub const GLFW_JOYSTICK_4: u32 = 3;
pub const GLFW_JOYSTICK_5: u32 = 4;
pub const GLFW_JOYSTICK_6: u32 = 5;
pub const GLFW_JOYSTICK_7: u32 = 6;
pub const GLFW_JOYSTICK_8: u32 = 7;
pub const GLFW_JOYSTICK_9: u32 = 8;
pub const GLFW_JOYSTICK_10: u32 = 9;
pub const GLFW_JOYSTICK_11: u32 = 10;
pub const GLFW_JOYSTICK_12: u32 = 11;
pub const GLFW_JOYSTICK_13: u32 = 12;
pub const GLFW_JOYSTICK_14: u32 = 13;
pub const GLFW_JOYSTICK_15: u32 = 14;
pub const GLFW_JOYSTICK_16: u32 = 15;
pub const GLFW_JOYSTICK_LAST: u32 = 15;
pub const GLFW_GAMEPAD_BUTTON_A: u32 = 0;
pub const GLFW_GAMEPAD_BUTTON_B: u32 = 1;
pub const GLFW_GAMEPAD_BUTTON_X: u32 = 2;
pub const GLFW_GAMEPAD_BUTTON_Y: u32 = 3;
pub const GLFW_GAMEPAD_BUTTON_LEFT_BUMPER: u32 = 4;
pub const GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER: u32 = 5;
pub const GLFW_GAMEPAD_BUTTON_BACK: u32 = 6;
pub const GLFW_GAMEPAD_BUTTON_START: u32 = 7;
pub const GLFW_GAMEPAD_BUTTON_GUIDE: u32 = 8;
pub const GLFW_GAMEPAD_BUTTON_LEFT_THUMB: u32 = 9;
pub const GLFW_GAMEPAD_BUTTON_RIGHT_THUMB: u32 = 10;
pub const GLFW_GAMEPAD_BUTTON_DPAD_UP: u32 = 11;
pub const GLFW_GAMEPAD_BUTTON_DPAD_RIGHT: u32 = 12;
pub const GLFW_GAMEPAD_BUTTON_DPAD_DOWN: u32 = 13;
pub const GLFW_GAMEPAD_BUTTON_DPAD_LEFT: u32 = 14;
pub const GLFW_GAMEPAD_BUTTON_LAST: u32 = 14;
pub const GLFW_GAMEPAD_BUTTON_CROSS: u32 = 0;
pub const GLFW_GAMEPAD_BUTTON_CIRCLE: u32 = 1;
pub const GLFW_GAMEPAD_BUTTON_SQUARE: u32 = 2;
pub const GLFW_GAMEPAD_BUTTON_TRIANGLE: u32 = 3;
pub const GLFW_GAMEPAD_AXIS_LEFT_X: u32 = 0;
pub const GLFW_GAMEPAD_AXIS_LEFT_Y: u32 = 1;
pub const GLFW_GAMEPAD_AXIS_RIGHT_X: u32 = 2;
pub const GLFW_GAMEPAD_AXIS_RIGHT_Y: u32 = 3;
pub const GLFW_GAMEPAD_AXIS_LEFT_TRIGGER: u32 = 4;
pub const GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER: u32 = 5;
pub const GLFW_GAMEPAD_AXIS_LAST: u32 = 5;
pub const GLFW_NO_ERROR: u32 = 0;
pub const GLFW_NOT_INITIALIZED: u32 = 65537;
pub const GLFW_NO_CURRENT_CONTEXT: u32 = 65538;
pub const GLFW_INVALID_ENUM: u32 = 65539;
pub const GLFW_INVALID_VALUE: u32 = 65540;
pub const GLFW_OUT_OF_MEMORY: u32 = 65541;
pub const GLFW_API_UNAVAILABLE: u32 = 65542;
pub const GLFW_VERSION_UNAVAILABLE: u32 = 65543;
pub const GLFW_PLATFORM_ERROR: u32 = 65544;
pub const GLFW_FORMAT_UNAVAILABLE: u32 = 65545;
pub const GLFW_NO_WINDOW_CONTEXT: u32 = 65546;
pub const GLFW_FOCUSED: u32 = 131073;
pub const GLFW_ICONIFIED: u32 = 131074;
pub const GLFW_RESIZABLE: u32 = 131075;
pub const GLFW_VISIBLE: u32 = 131076;
pub const GLFW_DECORATED: u32 = 131077;
pub const GLFW_AUTO_ICONIFY: u32 = 131078;
pub const GLFW_FLOATING: u32 = 131079;
pub const GLFW_MAXIMIZED: u32 = 131080;
pub const GLFW_CENTER_CURSOR: u32 = 131081;
pub const GLFW_TRANSPARENT_FRAMEBUFFER: u32 = 131082;
pub const GLFW_HOVERED: u32 = 131083;
pub const GLFW_FOCUS_ON_SHOW: u32 = 131084;
pub const GLFW_RED_BITS: u32 = 135169;
pub const GLFW_GREEN_BITS: u32 = 135170;
pub const GLFW_BLUE_BITS: u32 = 135171;
pub const GLFW_ALPHA_BITS: u32 = 135172;
pub const GLFW_DEPTH_BITS: u32 = 135173;
pub const GLFW_STENCIL_BITS: u32 = 135174;
pub const GLFW_ACCUM_RED_BITS: u32 = 135175;
pub const GLFW_ACCUM_GREEN_BITS: u32 = 135176;
pub const GLFW_ACCUM_BLUE_BITS: u32 = 135177;
pub const GLFW_ACCUM_ALPHA_BITS: u32 = 135178;
pub const GLFW_AUX_BUFFERS: u32 = 135179;
pub const GLFW_STEREO: u32 = 135180;
pub const GLFW_SAMPLES: u32 = 135181;
pub const GLFW_SRGB_CAPABLE: u32 = 135182;
pub const GLFW_REFRESH_RATE: u32 = 135183;
pub const GLFW_DOUBLEBUFFER: u32 = 135184;
pub const GLFW_CLIENT_API: u32 = 139265;
pub const GLFW_CONTEXT_VERSION_MAJOR: u32 = 139266;
pub const GLFW_CONTEXT_VERSION_MINOR: u32 = 139267;
pub const GLFW_CONTEXT_REVISION: u32 = 139268;
pub const GLFW_CONTEXT_ROBUSTNESS: u32 = 139269;
pub const GLFW_OPENGL_FORWARD_COMPAT: u32 = 139270;
pub const GLFW_OPENGL_DEBUG_CONTEXT: u32 = 139271;
pub const GLFW_OPENGL_PROFILE: u32 = 139272;
pub const GLFW_CONTEXT_RELEASE_BEHAVIOR: u32 = 139273;
pub const GLFW_CONTEXT_NO_ERROR: u32 = 139274;
pub const GLFW_CONTEXT_CREATION_API: u32 = 139275;
pub const GLFW_SCALE_TO_MONITOR: u32 = 139276;
pub const GLFW_COCOA_RETINA_FRAMEBUFFER: u32 = 143361;
pub const GLFW_COCOA_FRAME_NAME: u32 = 143362;
pub const GLFW_COCOA_GRAPHICS_SWITCHING: u32 = 143363;
pub const GLFW_X11_CLASS_NAME: u32 = 147457;
pub const GLFW_X11_INSTANCE_NAME: u32 = 147458;
pub const GLFW_NO_API: u32 = 0;
pub const GLFW_OPENGL_API: u32 = 196609;
pub const GLFW_OPENGL_ES_API: u32 = 196610;
pub const GLFW_NO_ROBUSTNESS: u32 = 0;
pub const GLFW_NO_RESET_NOTIFICATION: u32 = 200705;
pub const GLFW_LOSE_CONTEXT_ON_RESET: u32 = 200706;
pub const GLFW_OPENGL_ANY_PROFILE: u32 = 0;
pub const GLFW_OPENGL_CORE_PROFILE: u32 = 204801;
pub const GLFW_OPENGL_COMPAT_PROFILE: u32 = 204802;
pub const GLFW_CURSOR: u32 = 208897;
pub const GLFW_STICKY_KEYS: u32 = 208898;
pub const GLFW_STICKY_MOUSE_BUTTONS: u32 = 208899;
pub const GLFW_LOCK_KEY_MODS: u32 = 208900;
pub const GLFW_RAW_MOUSE_MOTION: u32 = 208901;
pub const GLFW_CURSOR_NORMAL: u32 = 212993;
pub const GLFW_CURSOR_HIDDEN: u32 = 212994;
pub const GLFW_CURSOR_DISABLED: u32 = 212995;
pub const GLFW_ANY_RELEASE_BEHAVIOR: u32 = 0;
pub const GLFW_RELEASE_BEHAVIOR_FLUSH: u32 = 217089;
pub const GLFW_RELEASE_BEHAVIOR_NONE: u32 = 217090;
pub const GLFW_NATIVE_CONTEXT_API: u32 = 221185;
pub const GLFW_EGL_CONTEXT_API: u32 = 221186;
pub const GLFW_OSMESA_CONTEXT_API: u32 = 221187;
pub const GLFW_ARROW_CURSOR: u32 = 221185;
pub const GLFW_IBEAM_CURSOR: u32 = 221186;
pub const GLFW_CROSSHAIR_CURSOR: u32 = 221187;
pub const GLFW_HAND_CURSOR: u32 = 221188;
pub const GLFW_HRESIZE_CURSOR: u32 = 221189;
pub const GLFW_VRESIZE_CURSOR: u32 = 221190;
pub const GLFW_CONNECTED: u32 = 262145;
pub const GLFW_DISCONNECTED: u32 = 262146;
pub const GLFW_JOYSTICK_HAT_BUTTONS: u32 = 327681;
pub const GLFW_COCOA_CHDIR_RESOURCES: u32 = 331777;
pub const GLFW_COCOA_MENUBAR: u32 = 331778;
pub const GLFW_DONT_CARE: i32 = -1;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type GLFWglproc = ::std::option::Option<unsafe extern "C" fn()>;
pub type GLFWvkproc = ::std::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLFWmonitor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLFWwindow {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLFWcursor {
    _unused: [u8; 0],
}
pub type GLFWerrorfun = ::std::option::Option<
    unsafe extern "C" fn(
        error_code: ::std::os::raw::c_int,
        description: *const ::std::os::raw::c_char,
    ),
>;
pub type GLFWwindowposfun = ::std::option::Option<
    unsafe extern "C" fn(
        window: *mut GLFWwindow,
        xpos: ::std::os::raw::c_int,
        ypos: ::std::os::raw::c_int,
    ),
>;
pub type GLFWwindowsizefun = ::std::option::Option<
    unsafe extern "C" fn(
        window: *mut GLFWwindow,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ),
>;
pub type GLFWwindowclosefun = ::std::option::Option<unsafe extern "C" fn(window: *mut GLFWwindow)>;
pub type GLFWwindowrefreshfun =
    ::std::option::Option<unsafe extern "C" fn(window: *mut GLFWwindow)>;
pub type GLFWwindowfocusfun = ::std::option::Option<
    unsafe extern "C" fn(window: *mut GLFWwindow, focused: ::std::os::raw::c_int),
>;
pub type GLFWwindowiconifyfun = ::std::option::Option<
    unsafe extern "C" fn(window: *mut GLFWwindow, iconified: ::std::os::raw::c_int),
>;
pub type GLFWwindowmaximizefun = ::std::option::Option<
    unsafe extern "C" fn(window: *mut GLFWwindow, maximized: ::std::os::raw::c_int),
>;
pub type GLFWframebuffersizefun = ::std::option::Option<
    unsafe extern "C" fn(
        window: *mut GLFWwindow,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ),
>;
pub type GLFWwindowcontentscalefun =
    ::std::option::Option<unsafe extern "C" fn(window: *mut GLFWwindow, xscale: f32, yscale: f32)>;
pub type GLFWmousebuttonfun = ::std::option::Option<
    unsafe extern "C" fn(
        window: *mut GLFWwindow,
        button: ::std::os::raw::c_int,
        action: ::std::os::raw::c_int,
        mods: ::std::os::raw::c_int,
    ),
>;
pub type GLFWcursorposfun =
    ::std::option::Option<unsafe extern "C" fn(window: *mut GLFWwindow, xpos: f64, ypos: f64)>;
pub type GLFWcursorenterfun = ::std::option::Option<
    unsafe extern "C" fn(window: *mut GLFWwindow, entered: ::std::os::raw::c_int),
>;
pub type GLFWscrollfun = ::std::option::Option<
    unsafe extern "C" fn(window: *mut GLFWwindow, xoffset: f64, yoffset: f64),
>;
pub type GLFWkeyfun = ::std::option::Option<
    unsafe extern "C" fn(
        window: *mut GLFWwindow,
        key: ::std::os::raw::c_int,
        scancode: ::std::os::raw::c_int,
        action: ::std::os::raw::c_int,
        mods: ::std::os::raw::c_int,
    ),
>;
pub type GLFWcharfun = ::std::option::Option<
    unsafe extern "C" fn(window: *mut GLFWwindow, codepoint: ::std::os::raw::c_uint),
>;
pub type GLFWcharmodsfun = ::std::option::Option<
    unsafe extern "C" fn(
        window: *mut GLFWwindow,
        codepoint: ::std::os::raw::c_uint,
        mods: ::std::os::raw::c_int,
    ),
>;
pub type GLFWdropfun = ::std::option::Option<
    unsafe extern "C" fn(
        window: *mut GLFWwindow,
        path_count: ::std::os::raw::c_int,
        paths: *mut *const ::std::os::raw::c_char,
    ),
>;
pub type GLFWmonitorfun = ::std::option::Option<
    unsafe extern "C" fn(monitor: *mut GLFWmonitor, event: ::std::os::raw::c_int),
>;
pub type GLFWjoystickfun = ::std::option::Option<
    unsafe extern "C" fn(jid: ::std::os::raw::c_int, event: ::std::os::raw::c_int),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLFWvidmode {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub redBits: ::std::os::raw::c_int,
    pub greenBits: ::std::os::raw::c_int,
    pub blueBits: ::std::os::raw::c_int,
    pub refreshRate: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_GLFWvidmode() {
    assert_eq!(
        ::std::mem::size_of::<GLFWvidmode>(),
        24usize,
        concat!("Size of: ", stringify!(GLFWvidmode))
    );
    assert_eq!(
        ::std::mem::align_of::<GLFWvidmode>(),
        4usize,
        concat!("Alignment of ", stringify!(GLFWvidmode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GLFWvidmode>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWvidmode),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GLFWvidmode>())).height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWvidmode),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GLFWvidmode>())).redBits as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWvidmode),
            "::",
            stringify!(redBits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GLFWvidmode>())).greenBits as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWvidmode),
            "::",
            stringify!(greenBits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GLFWvidmode>())).blueBits as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWvidmode),
            "::",
            stringify!(blueBits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GLFWvidmode>())).refreshRate as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWvidmode),
            "::",
            stringify!(refreshRate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLFWgammaramp {
    pub red: *mut ::std::os::raw::c_ushort,
    pub green: *mut ::std::os::raw::c_ushort,
    pub blue: *mut ::std::os::raw::c_ushort,
    pub size: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_GLFWgammaramp() {
    assert_eq!(
        ::std::mem::size_of::<GLFWgammaramp>(),
        32usize,
        concat!("Size of: ", stringify!(GLFWgammaramp))
    );
    assert_eq!(
        ::std::mem::align_of::<GLFWgammaramp>(),
        8usize,
        concat!("Alignment of ", stringify!(GLFWgammaramp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GLFWgammaramp>())).red as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWgammaramp),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GLFWgammaramp>())).green as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWgammaramp),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GLFWgammaramp>())).blue as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWgammaramp),
            "::",
            stringify!(blue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GLFWgammaramp>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWgammaramp),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLFWimage {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub pixels: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_GLFWimage() {
    assert_eq!(
        ::std::mem::size_of::<GLFWimage>(),
        16usize,
        concat!("Size of: ", stringify!(GLFWimage))
    );
    assert_eq!(
        ::std::mem::align_of::<GLFWimage>(),
        8usize,
        concat!("Alignment of ", stringify!(GLFWimage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GLFWimage>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWimage),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GLFWimage>())).height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWimage),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GLFWimage>())).pixels as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWimage),
            "::",
            stringify!(pixels)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLFWgamepadstate {
    pub buttons: [::std::os::raw::c_uchar; 15usize],
    pub axes: [f32; 6usize],
}
#[test]
fn bindgen_test_layout_GLFWgamepadstate() {
    assert_eq!(
        ::std::mem::size_of::<GLFWgamepadstate>(),
        40usize,
        concat!("Size of: ", stringify!(GLFWgamepadstate))
    );
    assert_eq!(
        ::std::mem::align_of::<GLFWgamepadstate>(),
        4usize,
        concat!("Alignment of ", stringify!(GLFWgamepadstate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GLFWgamepadstate>())).buttons as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWgamepadstate),
            "::",
            stringify!(buttons)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GLFWgamepadstate>())).axes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GLFWgamepadstate),
            "::",
            stringify!(axes)
        )
    );
}
extern "C" {
    pub fn glfwInit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwTerminate();
}
extern "C" {
    pub fn glfwInitHint(hint: ::std::os::raw::c_int, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn glfwGetVersion(
        major: *mut ::std::os::raw::c_int,
        minor: *mut ::std::os::raw::c_int,
        rev: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwGetVersionString() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glfwGetError(description: *mut *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwSetErrorCallback(callback: GLFWerrorfun) -> GLFWerrorfun;
}
extern "C" {
    pub fn glfwGetMonitors(count: *mut ::std::os::raw::c_int) -> *mut *mut GLFWmonitor;
}
extern "C" {
    pub fn glfwGetPrimaryMonitor() -> *mut GLFWmonitor;
}
extern "C" {
    pub fn glfwGetMonitorPos(
        monitor: *mut GLFWmonitor,
        xpos: *mut ::std::os::raw::c_int,
        ypos: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwGetMonitorWorkarea(
        monitor: *mut GLFWmonitor,
        xpos: *mut ::std::os::raw::c_int,
        ypos: *mut ::std::os::raw::c_int,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwGetMonitorPhysicalSize(
        monitor: *mut GLFWmonitor,
        widthMM: *mut ::std::os::raw::c_int,
        heightMM: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwGetMonitorContentScale(
        monitor: *mut GLFWmonitor,
        xscale: *mut f32,
        yscale: *mut f32,
    );
}
extern "C" {
    pub fn glfwGetMonitorName(monitor: *mut GLFWmonitor) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glfwSetMonitorUserPointer(
        monitor: *mut GLFWmonitor,
        pointer: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glfwGetMonitorUserPointer(monitor: *mut GLFWmonitor) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn glfwSetMonitorCallback(callback: GLFWmonitorfun) -> GLFWmonitorfun;
}
extern "C" {
    pub fn glfwGetVideoModes(
        monitor: *mut GLFWmonitor,
        count: *mut ::std::os::raw::c_int,
    ) -> *const GLFWvidmode;
}
extern "C" {
    pub fn glfwGetVideoMode(monitor: *mut GLFWmonitor) -> *const GLFWvidmode;
}
extern "C" {
    pub fn glfwSetGamma(monitor: *mut GLFWmonitor, gamma: f32);
}
extern "C" {
    pub fn glfwGetGammaRamp(monitor: *mut GLFWmonitor) -> *const GLFWgammaramp;
}
extern "C" {
    pub fn glfwSetGammaRamp(monitor: *mut GLFWmonitor, ramp: *const GLFWgammaramp);
}
extern "C" {
    pub fn glfwDefaultWindowHints();
}
extern "C" {
    pub fn glfwWindowHint(hint: ::std::os::raw::c_int, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn glfwWindowHintString(hint: ::std::os::raw::c_int, value: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn glfwCreateWindow(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
        monitor: *mut GLFWmonitor,
        share: *mut GLFWwindow,
    ) -> *mut GLFWwindow;
}
extern "C" {
    pub fn glfwDestroyWindow(window: *mut GLFWwindow);
}
extern "C" {
    pub fn glfwWindowShouldClose(window: *mut GLFWwindow) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwSetWindowShouldClose(window: *mut GLFWwindow, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn glfwSetWindowTitle(window: *mut GLFWwindow, title: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn glfwSetWindowIcon(
        window: *mut GLFWwindow,
        count: ::std::os::raw::c_int,
        images: *const GLFWimage,
    );
}
extern "C" {
    pub fn glfwGetWindowPos(
        window: *mut GLFWwindow,
        xpos: *mut ::std::os::raw::c_int,
        ypos: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwSetWindowPos(
        window: *mut GLFWwindow,
        xpos: ::std::os::raw::c_int,
        ypos: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwGetWindowSize(
        window: *mut GLFWwindow,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwSetWindowSizeLimits(
        window: *mut GLFWwindow,
        minwidth: ::std::os::raw::c_int,
        minheight: ::std::os::raw::c_int,
        maxwidth: ::std::os::raw::c_int,
        maxheight: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwSetWindowAspectRatio(
        window: *mut GLFWwindow,
        numer: ::std::os::raw::c_int,
        denom: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwSetWindowSize(
        window: *mut GLFWwindow,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwGetFramebufferSize(
        window: *mut GLFWwindow,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwGetWindowFrameSize(
        window: *mut GLFWwindow,
        left: *mut ::std::os::raw::c_int,
        top: *mut ::std::os::raw::c_int,
        right: *mut ::std::os::raw::c_int,
        bottom: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwGetWindowContentScale(window: *mut GLFWwindow, xscale: *mut f32, yscale: *mut f32);
}
extern "C" {
    pub fn glfwGetWindowOpacity(window: *mut GLFWwindow) -> f32;
}
extern "C" {
    pub fn glfwSetWindowOpacity(window: *mut GLFWwindow, opacity: f32);
}
extern "C" {
    pub fn glfwIconifyWindow(window: *mut GLFWwindow);
}
extern "C" {
    pub fn glfwRestoreWindow(window: *mut GLFWwindow);
}
extern "C" {
    pub fn glfwMaximizeWindow(window: *mut GLFWwindow);
}
extern "C" {
    pub fn glfwShowWindow(window: *mut GLFWwindow);
}
extern "C" {
    pub fn glfwHideWindow(window: *mut GLFWwindow);
}
extern "C" {
    pub fn glfwFocusWindow(window: *mut GLFWwindow);
}
extern "C" {
    pub fn glfwRequestWindowAttention(window: *mut GLFWwindow);
}
extern "C" {
    pub fn glfwGetWindowMonitor(window: *mut GLFWwindow) -> *mut GLFWmonitor;
}
extern "C" {
    pub fn glfwSetWindowMonitor(
        window: *mut GLFWwindow,
        monitor: *mut GLFWmonitor,
        xpos: ::std::os::raw::c_int,
        ypos: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        refreshRate: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwGetWindowAttrib(
        window: *mut GLFWwindow,
        attrib: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwSetWindowAttrib(
        window: *mut GLFWwindow,
        attrib: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwSetWindowUserPointer(window: *mut GLFWwindow, pointer: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn glfwGetWindowUserPointer(window: *mut GLFWwindow) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn glfwSetWindowPosCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowposfun,
    ) -> GLFWwindowposfun;
}
extern "C" {
    pub fn glfwSetWindowSizeCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowsizefun,
    ) -> GLFWwindowsizefun;
}
extern "C" {
    pub fn glfwSetWindowCloseCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowclosefun,
    ) -> GLFWwindowclosefun;
}
extern "C" {
    pub fn glfwSetWindowRefreshCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowrefreshfun,
    ) -> GLFWwindowrefreshfun;
}
extern "C" {
    pub fn glfwSetWindowFocusCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowfocusfun,
    ) -> GLFWwindowfocusfun;
}
extern "C" {
    pub fn glfwSetWindowIconifyCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowiconifyfun,
    ) -> GLFWwindowiconifyfun;
}
extern "C" {
    pub fn glfwSetWindowMaximizeCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowmaximizefun,
    ) -> GLFWwindowmaximizefun;
}
extern "C" {
    pub fn glfwSetFramebufferSizeCallback(
        window: *mut GLFWwindow,
        callback: GLFWframebuffersizefun,
    ) -> GLFWframebuffersizefun;
}
extern "C" {
    pub fn glfwSetWindowContentScaleCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowcontentscalefun,
    ) -> GLFWwindowcontentscalefun;
}
extern "C" {
    pub fn glfwPollEvents();
}
extern "C" {
    pub fn glfwWaitEvents();
}
extern "C" {
    pub fn glfwWaitEventsTimeout(timeout: f64);
}
extern "C" {
    pub fn glfwPostEmptyEvent();
}
extern "C" {
    pub fn glfwGetInputMode(
        window: *mut GLFWwindow,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwSetInputMode(
        window: *mut GLFWwindow,
        mode: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn glfwRawMouseMotionSupported() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwGetKeyName(
        key: ::std::os::raw::c_int,
        scancode: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glfwGetKeyScancode(key: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwGetKey(window: *mut GLFWwindow, key: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwGetMouseButton(
        window: *mut GLFWwindow,
        button: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwGetCursorPos(window: *mut GLFWwindow, xpos: *mut f64, ypos: *mut f64);
}
extern "C" {
    pub fn glfwSetCursorPos(window: *mut GLFWwindow, xpos: f64, ypos: f64);
}
extern "C" {
    pub fn glfwCreateCursor(
        image: *const GLFWimage,
        xhot: ::std::os::raw::c_int,
        yhot: ::std::os::raw::c_int,
    ) -> *mut GLFWcursor;
}
extern "C" {
    pub fn glfwCreateStandardCursor(shape: ::std::os::raw::c_int) -> *mut GLFWcursor;
}
extern "C" {
    pub fn glfwDestroyCursor(cursor: *mut GLFWcursor);
}
extern "C" {
    pub fn glfwSetCursor(window: *mut GLFWwindow, cursor: *mut GLFWcursor);
}
extern "C" {
    pub fn glfwSetKeyCallback(window: *mut GLFWwindow, callback: GLFWkeyfun) -> GLFWkeyfun;
}
extern "C" {
    pub fn glfwSetCharCallback(window: *mut GLFWwindow, callback: GLFWcharfun) -> GLFWcharfun;
}
extern "C" {
    pub fn glfwSetCharModsCallback(
        window: *mut GLFWwindow,
        callback: GLFWcharmodsfun,
    ) -> GLFWcharmodsfun;
}
extern "C" {
    pub fn glfwSetMouseButtonCallback(
        window: *mut GLFWwindow,
        callback: GLFWmousebuttonfun,
    ) -> GLFWmousebuttonfun;
}
extern "C" {
    pub fn glfwSetCursorPosCallback(
        window: *mut GLFWwindow,
        callback: GLFWcursorposfun,
    ) -> GLFWcursorposfun;
}
extern "C" {
    pub fn glfwSetCursorEnterCallback(
        window: *mut GLFWwindow,
        callback: GLFWcursorenterfun,
    ) -> GLFWcursorenterfun;
}
extern "C" {
    pub fn glfwSetScrollCallback(window: *mut GLFWwindow, callback: GLFWscrollfun)
        -> GLFWscrollfun;
}
extern "C" {
    pub fn glfwSetDropCallback(window: *mut GLFWwindow, callback: GLFWdropfun) -> GLFWdropfun;
}
extern "C" {
    pub fn glfwJoystickPresent(jid: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwGetJoystickAxes(
        jid: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *const f32;
}
extern "C" {
    pub fn glfwGetJoystickButtons(
        jid: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn glfwGetJoystickHats(
        jid: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn glfwGetJoystickName(jid: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glfwGetJoystickGUID(jid: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glfwSetJoystickUserPointer(
        jid: ::std::os::raw::c_int,
        pointer: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glfwGetJoystickUserPointer(jid: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn glfwJoystickIsGamepad(jid: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwSetJoystickCallback(callback: GLFWjoystickfun) -> GLFWjoystickfun;
}
extern "C" {
    pub fn glfwUpdateGamepadMappings(
        string: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwGetGamepadName(jid: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glfwGetGamepadState(
        jid: ::std::os::raw::c_int,
        state: *mut GLFWgamepadstate,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwSetClipboardString(window: *mut GLFWwindow, string: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn glfwGetClipboardString(window: *mut GLFWwindow) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glfwGetTime() -> f64;
}
extern "C" {
    pub fn glfwSetTime(time: f64);
}
extern "C" {
    pub fn glfwGetTimerValue() -> u64;
}
extern "C" {
    pub fn glfwGetTimerFrequency() -> u64;
}
extern "C" {
    pub fn glfwMakeContextCurrent(window: *mut GLFWwindow);
}
extern "C" {
    pub fn glfwGetCurrentContext() -> *mut GLFWwindow;
}
extern "C" {
    pub fn glfwSwapBuffers(window: *mut GLFWwindow);
}
extern "C" {
    pub fn glfwSwapInterval(interval: ::std::os::raw::c_int);
}
extern "C" {
    pub fn glfwExtensionSupported(
        extension: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwGetProcAddress(procname: *const ::std::os::raw::c_char) -> GLFWglproc;
}
extern "C" {
    pub fn glfwVulkanSupported() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glfwGetRequiredInstanceExtensions(count: *mut u32)
        -> *mut *const ::std::os::raw::c_char;
}
